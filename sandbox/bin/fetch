#!/bin/bash

# usage : fetch <md5> <url> <out>
#         fetch -refresh <url>

SB="$OPCSANDBOX"
TMPDIR="$SB/fetch-cache/tmp"
TMP="$TMPDIR/$$"
LOGFILE="$SB/fetch-cache/log.txt"
MDDIR="$SB/fetch-cache/md5"
URLDIR="$SB/fetch-cache/url"
BIN="$SB/bin"

function log () {
    printf "fetch: "
    printf "$@"
    printf "\n"
}

function index () {
    D1=${1%??????????????????????????????}
    X=${1#??}
    D2=${X%????????????????????????????}
    mkdir -p "$MDDIR/$D1/$D2"
    echo "$MDDIR/$D1/$D2/$1"
}

function do_fetch () {
    # usage do_fetch <url>
    log "fetching %s" "$1"
    rm -f "$TMP"
    "$BIN"/realcurl -s -S -k -L "$1" -o "$TMP"
    rc=$?
    if [[ -f "$TMP" ]]; then
        MD5="$(md5sum <"$TMP")"
        MD5=${MD5%% *}
        log "got rc:%d md5:%s" $rc $MD5
        MDFILE=$(index $MD5)
        mv "$TMP" "$MDFILE"
        mkdir -p "$URLDIR/$1"
        ln -sf "$MDFILE" "$URLDIR/$1/file"
    else
        log "got rc:%d and no output file" $rc
        exit $rc
    fi
}

function usage () {
    echo 'usage : fetch <md5> <url> <out>' >&2
    echo 'or      fetch -refresh <url>' >&2
    exit 1
}

# We must not cache the tar files for compiler branches because they
# change over time (especially trunk!) and the OPAM repo doesn't have
# MD5 for them.
function check_special_url () {
  case "$1" in
  *github.com/ocaml/ocaml/*/[1-9].[0-9][0-9].[0-9].tar.gz)
      # full version number is a stable tag
      return 0;;
  *github.com/ocaml/ocaml/*)
      # anything else from the OCaml repo is most probably a changing branch
      log "ignore cache for ocaml compiler branch"
      return 1;;
  *) return 0;
  esac
}

mkdir -p "$TMPDIR" "$MDDIR" "$URLDIR"

case $1 in
    -refresh)
        exec >>"$LOGFILE" 2>&1
        log "# fetch %s" "$*"
        do_fetch "$2"
        ;;
    *)
        if [[ $# -ne 3 ]]; then usage; fi
        exec >>"$LOGFILE" 2>&1
        log "# fetch %s" "$*"
        MDSUM=${1#md5=}
        MDFILE="$(index "$MDSUM")"
        URLFILE="$URLDIR/$2/file"
        if [[ -f "$MDFILE" ]]; then
            log "found digest in cache"
            cp "$MDFILE" "$3"
        elif [[ -f "$URLFILE" ]] && check_special_url "$2" ; then
            log "wrong md5: req:%s cache:%s for %s" "$MDSUM" $(md5sum <"$URLFILE") "$2"
            cp "$URLFILE" "$3"
        else
            do_fetch "$2"
            cp "$URLFILE" "$3"
        fi
        ;;
esac
